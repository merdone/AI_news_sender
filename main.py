import telebot
from telebot import types
from dotenv import load_dotenv
from parse import *
from translate import *
from gpt import get_gpt_answer, sample_translate, sample_retell
import os

load_dotenv()
bot = telebot.TeleBot(os.getenv('TOKEN'))

editions = ["BILD", "Spiegel", "CNN", "BBC", "The Daily Telegraph"]
editions_url = ["bild", "spiegel", "cnn", "bbc", "telegraph"]

func_list = [parse_list_bild, parse_list_spiegel, parse_list_cnn, parse_list_bbc, parse_list_telegraph]
func_text = [parse_text_bild, parse_text_spiegel, parse_text_cnn, parse_text_bbc, parse_text_telegraph]

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup.add(types.KeyboardButton("üìú –°–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª"),
           types.KeyboardButton("‚úâ –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫"))

first_choice = types.InlineKeyboardMarkup(row_width=1)
for temp in editions:
    first_choice.add(types.InlineKeyboardButton(text=temp, callback_data=temp))
first_choice.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º", callback_data="work_url"))

third_choice = types.InlineKeyboardMarkup(row_width=2)
third_choice.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ AI", callback_data="translate_ai"),
                 types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ Google", callback_data="translate_google"),
                 types.InlineKeyboardButton(text="–°–∫–æ—Ä–æ—Ç–∏—Ç–∏", callback_data="make_short"))

third_choice_ai = types.InlineKeyboardMarkup(row_width=2)
third_choice_ai.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ Google", callback_data="translate_google"),
                    types.InlineKeyboardButton(text="–°–∫–æ—Ä–æ—Ç–∏—Ç–∏", callback_data="make_short"),
                    types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É", callback_data="cancel"))

third_choice_gl = types.InlineKeyboardMarkup(row_width=2)
third_choice_gl.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ AI", callback_data="translate_ai"),
                    types.InlineKeyboardButton(text="–°–∫–æ—Ä–æ—Ç–∏—Ç–∏", callback_data="make_short"),
                    types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É", callback_data="cancel"))

third_choice_sh = types.InlineKeyboardMarkup(row_width=2)
third_choice_sh.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ AI", callback_data="translate_ai"),
                    types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ Google", callback_data="make_short"),
                    types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É", callback_data="cancel"))


@bot.message_handler(commands=['start'])
def start(message: types.Message):
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAECo79ljVIJMGtC055ZKwT24S50L81lHAAC2A8AAkjyYEsV-8TaeHRrmDME")
    bot.send_message(message.chat.id,
                     "–î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—Ç—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É üëá",
                     reply_markup=markup)


@bot.message_handler(content_types="text")
def start_news(message):
    global start_message
    if message.text == "üìú –°–ø–∏—Å–æ–∫ –¥–∂–µ—Ä–µ–ª":
        start_message = bot.send_message(message.chat.id, "<b>–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ, –∑ —è–∫–æ–≥–æ –±—Ä–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é:</b>", reply_markup=first_choice,
                         parse_mode="html")
    elif message.text == "‚úâ –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫":
        feedback_message = bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫:")
        bot.register_next_step_handler(feedback_message, input_feedback)


def input_feedback(message):
    file = open('feedback.txt', 'a')
    try:
        file.write(message.text + "\n")
    except:
        pass
    file.close()
    bot.send_message(message.chat.id, "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üò∫")
    start_news(message)


def input_url(message):
    global previous_message
    global message_text
    try:
        if message.text.split("/")[2].split(".")[1] in editions_url:
            message_text = func_text[editions_url.index(message.text.split("/")[2].split(".")[1])]("", message.text)
            previous_message = bot.send_message(message.chat.id, message_text, reply_markup=third_choice)
        else:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            start_news(message)
    except:
        bot.send_message(message.chat.id, "–ù–µ –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞–º —Ü—é —Å—Ç–∞—Ç—Ç—é, —á–µ—Ä–µ–∑ –ª—ñ–º—ñ—Ç —Å–ª—ñ–≤ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –≤ "
                                          "—Ç–µ–ª–µ–≥—Ä–∞–º—ñ.–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Å—Ç–∞—Ç—Ç—é.")
        start_news(message)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    global message_text
    global previous_message
    try:
        if call.data in editions:
            text = ""
            for i in range(len(list(func_list[editions.index(call.data)]().keys()))):
                text += f"{i + 1} - {translate_text(list(func_list[editions.index(call.data)]().keys())[i])}\n\n"
            second_choice = types.InlineKeyboardMarkup(row_width=5)
            for temp in range(len(func_list[editions.index(call.data)]())):
                second_choice.add(types.InlineKeyboardButton(text=str(temp + 1),
                                                             callback_data=f"request.{temp}.{editions[editions.index(call.data)]}"))
            bot.delete_message(call.message.chat.id, start_message.message_id)
            previous_message = bot.send_message(call.message.chat.id, f"<b>–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ —Å—Ç–∞—Ç–µ–π:</b>\n\n {text}",
                                                reply_markup=second_choice, parse_mode="html")
        if call.data == "work_url":
            message_url = bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –∑ —è–∫–æ–≥–æ –±—Ä–∞—Ç—É —Å—Ç–∞—Ç—Ç—é: \n "
                                                                 "–ü—Ä–∏–π–º–∞—é—Ç—å—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è: \n <b>Bild, Spiegel, CNN, "
                                                                 "BBC, The Daily Telegraph</b>", parse_mode="html")
            bot.register_next_step_handler(message_url, input_url)

        if call.data.startswith("request"):
            first_part = call.data.split(".")
            second_part = editions.index(call.data.split(".")[-1])
            message_text = func_text[second_part](list(func_list[second_part]().keys())[int(first_part[1])], "")
            bot.delete_message(call.message.chat.id, previous_message.message_id)
            previous_message = bot.send_message(call.message.chat.id, message_text, reply_markup=third_choice)
        if call.data == "cancel":
            bot.delete_message(call.message.chat.id, previous_message.message_id)
            bot.send_message(call.message.chat.id, "–î—è–∫—É—é –∑–∞ —Ç–µ —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –º–Ω–æ—é. –ì–∞—Ä–Ω–æ–≥–æ –í–∞–º –¥–Ω—è!")
            start_news(call.message)
        if "translate" in call.data:
            if "ai" in call.data:
                bot.delete_message(call.message.chat.id, previous_message.message_id)
                waiting_message = bot.send_sticker(call.message.chat.id,
                                                   "CAACAgIAAxkBAAECo-VljVxoT8_jubOyMcU6LlPW2YKbmwACIwADKA9qFCdRJeeMIKQGMwQ")
                previous_message = bot.send_message(call.message.chat.id,
                                                    get_gpt_answer(message_text, sample_translate),
                                                    reply_markup=third_choice_ai)
                bot.delete_message(call.message.chat.id, waiting_message.message_id)
            else:
                bot.delete_message(call.message.chat.id, previous_message.message_id)
                previous_message = bot.send_message(call.message.chat.id, translate_text(message_text),
                                                    reply_markup=third_choice_gl)
        if call.data == "make_short":
            bot.delete_message(call.message.chat.id, previous_message.message_id)
            waiting_message = bot.send_sticker(call.message.chat.id,
                                               "CAACAgIAAxkBAAECo-VljVxoT8_jubOyMcU6LlPW2YKbmwACIwADKA9qFCdRJeeMIKQGMwQ")
            previous_message = bot.send_message(call.message.chat.id, get_gpt_answer(message_text, sample_retell),
                                                reply_markup=third_choice_sh)
            bot.delete_message(call.message.chat.id, waiting_message.message_id)


    except:
        bot.send_message(call.message.chat.id, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞, –æ–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–Ω—à—É —Å—Ç–∞—Ç—Ç—éü§ó")
        start_news(call.message)


bot.polling(none_stop=True)
